測試regular expression的網站
http://regex101.com/#pcre
使用方法是把regexp pattern貼在上面REGULAR EXPRESSION的文字輸入框
下方的TEST STRING輸入你要用來比對的字串
「匹配字串」和「不匹配字串」感覺有點不知所云
你可以直接想成，這個字串是不是符合regexp規定的樣式？
我覺得這樣的翻譯更直白
「符合樣式規則」或是「不符合樣式規則」


pattern：^h
解釋：以h開頭的字串
匹配字串：hello、h、hh


pattern：e$
解釋：以e結尾的字串
匹配字串：sample、e、file


pattern：hell.
解釋：包含hell然後緊接著任何一個字元的字串
匹配字串：hello、hellx、hell5、hell!


pattern：hell[a-y123-]
解釋：包含hell然後緊接的那一個字元是a-y其中一個英文字元，或是123其中一個數字，或是-符號都可以
匹配字串：hello、hell1、hell2、hell3、hell-


pattern：hell[^a-np-z0-9]
解釋：包含hell然後緊接的那一個字元「不可以」是a-n或是p-z之間的任一英文字母，也「不可以」是0-9任一數字
匹配字串：hello、hell@


pattern：hello|welcome
解釋：只可以是hello或是welcome，其他字串都不行
匹配字串：hello、welcome


pattern：^(hello|hi) there$
解釋：以hello或是hi開頭，然後以there作結尾
匹配字串：hello there、hi there


pattern：Hello\.
解釋：包含Hello.共六個字元
匹配字串：Hello.、Maria Hello.I am your XXX


pattern：he*llo
解釋：包含h，然後緊接著字元e可以出現0次或是更多次，再緊接著llo
匹配字串：hllo、hello、heeeello


pattern：he+llo
解釋：包含h，然後緊接著字元e至少要出現1次或是更多次，再緊接著llo
匹配字串：hello、heello、heeeeeello、Tony say hello


pattern：he?llo
解釋：包含h，然後緊接著字元e只能出現1次或是0次，再緊接著llo
匹配字串：hllo、hello


pattern：he{3}llo
解釋：包含h，然後緊接著字元e要出現剛好3次，再緊接著llo
匹配字串：heeello、Tony say heeello


pattern：he{3,}llo
解釋：包含h，然後緊接著字元e要出現至少3次，再緊接著llo
匹配字串：heeello、heeeello、heeeeello


pattern：he{2,4}llo
解釋：包含h，然後緊接著字元e要出現2到4次，再緊接著llo
匹配字串：heello、heeello、heeeello


pattern：^(hello|hi) (sir|mister)$
解釋：以hello或是hi開頭，並且以sir或是mister結尾
匹配字串：hello sir、hello mister、hi sir、hi mister
抓到的變數名：$1、$2
字串是hello sir時 $1 的值：hello
字串是hello sir時 $2 的值：sir
字串是hi mister時 $1 的值：hi
字串是hi mister時 $2 的值：mister


pattern：^(hello (sir))$
解釋：以hello sir開頭，並且以hello sir結尾
匹配字串：hello sir
抓到的變數名：$1、$2
字串是hello sir時 $1 的值：hello sir
字串是hello sir時 $2 的值：sir


pattern：^(.*)$
解釋：以任意字元開頭（可重複0到多次），並且以任意字元結尾（可重複0到多次）
匹配字串：什麼都可以，包括空字串都匹配
抓到的變數名：$1
字串是tony stark時 $1 的值是tony stark
字串是ironman時 $1 的值是ironman


pattern：^(.{1,3})([0-9]{1,4})([?!]{1,2})$
解釋：有三組( )所以分成三組來看，首先是任意字元重複1到3次作為開頭，再來是數字重複1到4次，再來是?或!符號重複1到2次作為結尾
匹配字串：ggg222?、ccc9999!?
抓到的變數名：$1、$2、$3
字串是ggg222?時 $1 的值是ggg
字串是ggg222?時 $2 的值是222
字串是ggg222?時 $3 的值是?
字串是ccc9999!?時 $1的值是ccc
字串是ccc9999!?時 $2的值是9999
字串是ccc9999!?時 $3的值是!?


pattern：^\/(?<folder>[^\/]*)\/(?<file>.*)$
解釋：右上左下的斜線前面要加上escape跳脫字元（左上右下斜線），第一個群組是$folder變數，第二個群組是$file變數
　　　以右上左下斜線當開頭，任意字元重複任意次（但不包括右上左下斜線），再緊接著一支右下左下斜線，再緊接著任意字元的任意次數為結尾
匹配字串：/html/spec
抓到的變數名：$folder、$file
字串是/html/spec時 $folder 的值是html
字串是/html/spec時 $file 的值是spec


pattern：^/(downloads|files)/(.*)$
解釋：以downloads或是files為開頭，緊接著一根/（右上左下的斜線），再緊接著是任意字元出現任意次數作為結尾
匹配字串：/downloads/picachu.jpg、/files/okita.avi
抓到的變數名：$1、$2
字串是/downloads/picachu.jpg時 $1 的值是downloads
字串是/downloads/picachu.jpg時 $2 的值是picachu.jpg
字串是/files/okita.avi時 $1 的值是files
字串是/files/okita.avi時 $2 的值是okita.avi


還有新發現的話會繼續補上
