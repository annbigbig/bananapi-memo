問題：如何使用git push指令，完成網站代碼的部署？

參考了這一篇
https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps

我解釋一下情況
服務器上有一個用戶叫testuser01，他的網站根目錄在/home/testuser01/website
然後一樣在服務器上他用來接收代碼的bare repository的路徑在/home/testuser01/site.git
平常他在他的筆記型電腦上工作，在他自已的筆記型電腦上他的用戶名是localuser01
然後他把網站的代碼repo的路徑放在/home/localuser01/working-repo
這個working-repo是一個正常的有工作目錄的git repository
他想要達成的效果是，在他的筆記型電腦作業，在更新完網站的代碼
（也就是在/home/localuser01/working-repo目錄裡作了git add -A然後git commit -m "some messages"作提交之後）
他希望在筆記型電腦的/home/localuser01/working-repo目錄裡，執行git push origin master指令之後
然後服務器上的bare repository（路徑：/home/testuser01/site.git）接收到代碼之後
自動把更新的代碼給checkout一份出來，複製到網站的根目錄（/home/testuser01/website）
網站的根目錄就很單純只有checkout出來的代碼，也就是網站的內容網頁，它不是git repository

首先確認你的ssh server已經安裝，並且正常啟動
（可以參考先前的筆記在：https://github.com/annbigbig/cubietruck_tutorial/blob/master/Aruntu_0888/objective_6.txt）
完成以下步驟
服務器端：
a.新增用戶testuser01，並讓服務器上的www-data用戶加入他的群組
b.產生用戶testuser01的ssh key pair
c.將用戶testuser01的public key加到自已的authorized_keys
d.在testuser01用戶家目錄下產生bare repo
e.設定bare repo的hooks/post-receive
f.在testuser01用戶家目錄下產生網站根目錄

工作機端（方案一）：
g.新增用戶localuser01，並設定密碼
h.把服務器用戶testuser01的private key拷貝到本機用戶localuser01家目錄下的.ssh目錄
i.測試使用剛才拷貝下來的private key是否可以用testuser01的身分ssh登入到服務器
j.把服務器上testuser01用戶家目錄下的bare repo給git clone下來到工作機端，並更名為working-repo
k.在working-repo裡修改代碼，暫存，提交，然後推回服務器上的bare-repo
l.觀察服務器上的網站根目錄是否有被更新？

工作機端（方案二）：
m.把服務器用戶testuser01的private key拷貝到本機用戶anntony家目錄下的.ssh/others目錄，並更名
n.修改工作機上已存在舊用戶anntony家目錄下的.ssh/config
o.測試上一個步驟在.ssh/config設定的主機別名有沒有生效？使用這個主機別名ssh連線到服務器（以testuser01用戶身分）
p.把服務器上的site.git給git clone到工作機，並更名為working-repo
q.重複上面的步驟k和l，不再重複詳述

額外技巧：
r.如何「倒帶」讓網站根目錄回到上一個提交的狀態？
s.如何讓用戶完全禁止使用ssh登入服務器（包括密碼登入或是私鑰登入都不行），只能使用git clone拉site.git下來，或是git push推回site.git
t.假設現在網站服務器和工作機位於同一個網段內（192.168.0.0/24），如何建立測試環境？

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
細節開始

a.新增用戶testuser01，並設定密碼
登入服務器，切換到root身份，執行 
# adduser testuser01

和終端機交談一下，回答幾個問題
正在新增使用者 `testuser01' ...
增加新群組 `testuser01' (1005) ...
正在新增新使用者 `testuser01' (UID 1005) 到群組 `testuser01' ...
正在新增家目錄 `/home/testuser01' ...
正在從 `/etc/skel'複製檔案 ...
新 密碼： 
再次輸入新的 密碼： 
passwd：密碼已成功地變更
正在改變 testuser01 的使用者訊息
請輸入新值，或直接按 ENTER 鍵以使用預設值
	全名 []: 
	房間號碼 []: 
	工作電話 []: 
	住家電話 []: 
	其它 []: 
以上輸入的資料正確嗎？[Y/n] y

查看一下現在服務器上的www-data用戶有加入什麼群組？
# id www-data

終端機打印了
uid=33(www-data) gid=33(www-data) 群組=33(www-data)

把www-data用戶加到testuser01群組
這麼作是為了稍後nginx的worker processes（以用戶www-data執行）
可以順利存取到用戶testuser01的網站根目錄（權限值775，owner和group都是testuser01）
執行
# usermod -a -G testuser01 www-data

然後再查看一次用戶www-data有加入的群組，執行
# id www-data

終端機打印了
uid=33(www-data) gid=33(www-data) 群組=33(www-data),1005(testuser01)

很好，用戶www-data真的加入testuser01群組了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
b.產生用戶testuser01的ssh key pair

切換到用戶testuser01的身分，如果你當下是root用戶，可以這樣執行
# sudo su - testuser01

看一下現在我是誰？
$ whoami

終端機打印了
testuser01

看一下我現在人在什麼目錄？
$ pwd

終端機打印了
/home/testuser01

看看目錄下有什麼檔案？
$ ls -al

終端機打印了
總計 28
drwxr-xr-x 2 testuser01 testuser01 4096 11月  3 18:46 .
drwxr-xr-x 8 root       root       4096 11月  3 18:46 ..
-rw-r--r-- 1 testuser01 testuser01  220 11月  3 18:46 .bash_logout
-rw-r--r-- 1 testuser01 testuser01 3637 11月  3 18:46 .bashrc
-rw-r--r-- 1 testuser01 testuser01  675 11月  3 18:46 .profile
-rw-r--r-- 1 testuser01 testuser01 1601 11月  3 18:46 .Xdefaults
-rw-r--r-- 1 testuser01 testuser01   14 11月  3 18:46 .xscreensaver

沒有.ssh目錄耶，所以我們要新增一個，執行
$ mkdir .ssh

修改權限為700，這個目錄只有用戶testuser01本人可以看
$ chmod 700 /home/testuser01/.ssh

進入.ssh目錄
$ cd /home/testuser01/.ssh

產生ssh key pair，執行
$ ssh-keygen -t rsa -C "testuser01@localhost"

終端機打印了
Generating public/private rsa key pair.
Enter file in which to save the key (/home/testuser01/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/testuser01/.ssh/id_rsa.
Your public key has been saved in /home/testuser01/.ssh/id_rsa.pub.
The key fingerprint is:
a8:be:32:d2:c3:0c:40:0c:c5:78:cf:ed:46:55:ac:af testuser01@localhost
The key's randomart image is:
+--[ RSA 2048]----+
|++.      o.      |
|.oo     . .      |
|.. o . . .       |
|.   o o..        |
|.    o. S.       |
|.    .o   .      |
| =  ..   .       |
|. B.    E        |
| . +o.           |
+-----------------+
上面產生ssh key pair時終端機問了你三個問題，一個是private key的路徑
另外兩個是要你輸入通關密語，還有再次確認通關密語
這三個問題我都按Enter採用預設值（也就是預設的路徑/home/testuser01/.ssh/id_rsa，然後沒有設定通關密語）

看看剛才的指令在.ssh目錄裡產生了什麼檔案？
$ ls -al

終端機打印了
總計 16
drwx------ 2 testuser01 testuser01 4096 11月  3 20:41 .
drwxr-xr-x 3 testuser01 testuser01 4096 11月  3 20:31 ..
-rw------- 1 testuser01 testuser01 1675 11月  3 20:41 id_rsa
-rw-r--r-- 1 testuser01 testuser01  402 11月  3 20:41 id_rsa.pub

其中id_rsa是私鑰（private key），而id_rsa.pub是公鑰（public key）

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
c.將用戶testuser01的public key加到自已的authorized_keys

接著剛才的步驟，一樣是用戶testuser01登入的狀態
切換到/home/testuser01/.ssh目錄
$ cd /home/testuser01/.ssh

產生一個空白的名為authorized_keys的檔案
$ touch authorized_keys

把檔案權限改成600
$ chmod 600 authorized_keys

把剛才產生的公鑰的內容，整個放到authorized_keys裡
$ cat id_rsa.pub >> authorized_keys

看一下authorized_keys的內容
$ cat authorized_keys

終端機打印了
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLrqr8IeTxmhtJce7SX43sexHVt8s3LOSuuLEmHJ345B0fq3AjZ2nvw8C/mHY5heuBU5tq6Yke3Yuxqgudv/+XZtYv+qQrlgJQxrcQIRBF+7PDUfxv8wYm846iWZ5l69WWKqv2tBhk/2luFbHhCyGOacLftF2O0OWOKicQgGVatA5L+REzCA95KNFqazoUykKIskh/7Ps6Icz8ziL9P63PNG+s5Hxff6PCGNXmgVnK/K//NXLXGMXWnHKASbu4tr3YIuDB/SCAlWx3BqV1gj9f9TXy+5O3ul+Va687l6UP2aUlFM3GQGVGV5938vSCWLeI8/oBfBCxjIJVAvvpOeqj testuser01@localhost

由於現在這個authorized_keys檔案裡面，只有記錄一支公鑰
所以它剛好會和剛才產生的公鑰/home/testuser01/.ssh/id_rsa.pub
一模一樣，一個字元都不差
/home/testuser01/.ssh/authorized_keys裡面記錄了
有那些公錀是合法的？只要ssh用戶端持有這個檔案裡記錄的公鑰所對應的私鑰（記得鑰匙都是一對的），並指定以這支私錀對服務器作ssh連線（以testuser01用戶身份）
都可以在這台服務器上，以testuser01用戶的身分來登入

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
d.在testuser01用戶家目錄下產生bare repo

一樣是在服務器上，一樣是testuser01的身分
切換目錄到用戶testuser01的家目錄下
$ cd /home/testuser01

接下來會執行git指令，因為這是testuser01用戶第一次在服務器上執行git指令
請先為testuser01用戶設定git套件的user.name和user.email
$ git config --global user.name "testuser01"
$ git config --global user.email testuser01@localhost

執行完上面的設定user.name和user.email的指令之後，會在testuser01的家目錄下產生一個.gitconfig檔案
你可以看一下剛才的那兩行指令為你寫了什麼東西？
$ cat ~/.gitconfig

終端機打印了
[user]
	name = testuser01
	email = testuser01@localhost

接下來產生用來接收新代碼的bare repo
你現在的位置還是在/home/testuser01目錄裡
執行
$ git init --bare site.git

終端機打印了
Initialized empty Git repository in /home/testuser01/site.git/

看一下是不是真的產生了site.git目錄，執行
$ ls -al

終端機打印了
總計 44
drwxr-xr-x 4 testuser01 testuser01 4096 11月  4 02:53 .
drwxr-xr-x 8 root       root       4096 11月  3 18:46 ..
-rw------- 1 testuser01 testuser01  348 11月  3 21:09 .bash_history
-rw-r--r-- 1 testuser01 testuser01  220 11月  3 18:46 .bash_logout
-rw-r--r-- 1 testuser01 testuser01 3637 11月  3 18:46 .bashrc
-rw-rw-r-- 1 testuser01 testuser01   56 11月  4 02:51 .gitconfig
-rw-r--r-- 1 testuser01 testuser01  675 11月  3 18:46 .profile
drwxrwxr-x 7 testuser01 testuser01 4096 11月  4 02:53 site.git
drwx------ 2 testuser01 testuser01 4096 11月  3 20:51 .ssh
-rw-r--r-- 1 testuser01 testuser01 1601 11月  3 18:46 .Xdefaults
-rw-r--r-- 1 testuser01 testuser01   14 11月  3 18:46 .xscreensaver

有看到site.git目錄，而且權限是775，擁有人和群組都是testuser01

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
e.設定bare repo的hooks/post-receive

現在要在剛才產生的site.git空白的裸倉庫裡，設定一個叫hooks/post-receive的檔案
這個檔案會在site.git裸倉庫，接受到異地push過來的代碼之後執行一次
我們會在裡面規定，在它收到push來的代碼之後，把更新的代碼checkout出來，複製到testuser01的網站根目錄
這個檔案預設不存在，所以我們要手動新增它，執行

切換到hooks目錄
$ cd /home/testuser01/site.git/hooks

產生一個空白的post-receive檔案
$ touch post-receive

修改檔案擁有人和群組都是用戶testuser01
$ chown testuser01:testuser01 post-receive

修改檔案權限為775
$ chmod 775 post-receive

打開vi文字編輯器，編輯post-receive的內容，請改成這樣
#!/bin/sh
git --work-tree=/home/testuser01/website --git-dir=/home/testuser01/site.git checkout -f

改好存檔，離開vi文字編輯器，上面的post-receive的內容
前面的--work-tree=/home/testuser01/website
規定的是用戶testuser01的網站根目錄路徑
而後面的--git-dir=/home/testuser01/site.git
規定的是用來接收代碼的bare repo的路徑
整句的意思是，在/home/testuser01/site.git接收到異地git push來的代碼之後
hooks/post-receive會把更新後的代碼，checkout一份出來，放到/home/testuser01/website也就是網站根目錄裡

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
f.在testuser01用戶家目錄下產生網站根目錄

你需要手動產生用戶testuser01的網站根目錄
切換到用戶testuser01的家目錄下
$ cd /home/testuser01

產生website子目錄
$ mkdir website

看一下是不是真的有產生了？
$ ls -al

終端機打印了
總計 52
drwxr-xr-x 5 testuser01 testuser01 4096 11月  4 03:12 .
drwxr-xr-x 8 root       root       4096 11月  3 18:46 ..
-rw------- 1 testuser01 testuser01  348 11月  3 21:09 .bash_history
-rw-r--r-- 1 testuser01 testuser01  220 11月  3 18:46 .bash_logout
-rw-r--r-- 1 testuser01 testuser01 3637 11月  3 18:46 .bashrc
-rw-rw-r-- 1 testuser01 testuser01   56 11月  4 02:51 .gitconfig
-rw-r--r-- 1 testuser01 testuser01  675 11月  3 18:46 .profile
drwxrwxr-x 7 testuser01 testuser01 4096 11月  4 02:53 site.git
drwx------ 2 testuser01 testuser01 4096 11月  3 20:51 .ssh
-rw------- 1 testuser01 testuser01  673 11月  4 03:10 .viminfo
drwxrwxr-x 2 testuser01 testuser01 4096 11月  4 03:12 website
-rw-r--r-- 1 testuser01 testuser01 1601 11月  3 18:46 .Xdefaults
-rw-r--r-- 1 testuser01 testuser01   14 11月  3 18:46 .xscreensaver

有看到website子目錄，它的權限是775，而且擁有人和群組都是testuser01
這樣子稍後和用戶testuser01同一個群組的www-data用戶，可以存取這個website網站根目錄
（因為nginx的worker processes是用www-data用戶身份來執行的）

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
g.新增用戶localuser01，並設定密碼

剛才服務器上的設定都完成了，現在請回到工作機，也就是筆記型電腦上
我們要產生一個新用戶叫localuser01
請先切換到root用戶，指令是
$ sudo -i

然後新增localuser01用戶
# adduser localuser01

和終端機交談一下：
正在新增使用者 `localuser01' ...
增加新群組 `localuser01' (1002) ...
正在新增新使用者 `localuser01' (UID 1002) 到群組 `localuser01' ...
正在新增家目錄 `/home/localuser01' ...
正在從 `/etc/skel'複製檔案 ...
輸入新的 UNIX 密碼： 
再次輸入新的 UNIX 密碼： 
passwd：密碼已成功地變更
正在改變 localuser01 的使用者訊息
請輸入新值，或直接按 ENTER 鍵以使用預設值
	全名 []: 
	房間號碼 []: 
	工作電話 []: 
	住家電話 []: 
	其它 []: 
以上輸入的資料正確嗎？[Y/n] y

這樣就新增了工作機上的新用戶localuser01
檢查一下是不是真的有這個用戶存在，執行
# cat /etc/passwd | grep localuser01

終端機打印了
localuser01:x:1002:1002:,,,:/home/localuser01:/bin/bash

看看他的家目錄
# ls -al /home

終端機打印了
總計 20
drwxr-xr-x  5 root        root        4096 11月  4 03:22 .
drwxr-xr-x 24 root        root        4096  8月 20 15:20 ..
drwxr-xr-x 48 anntony     anntony     4096 11月  4 02:16 anntony
drwxr-xr-x  4 localuser01 localuser01 4096 11月  4 03:22 localuser01
drwxr-xr-x  6 peter       peter       4096  9月 15 14:59 peter

嗯，很好很好，工作機新用戶localuser01真的新增了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
h.把服務器用戶testuser01的private key拷貝到本機用戶localuser01家目錄下的.ssh目錄

假設你現在在工作機上，而且身分是root用戶
請執行以下指令，切換到剛才新增的localuser01用戶
# sudo su - localuser01

切換到localuser01的家目錄
$ cd /home/localuser01

產生一個.ssh子目錄
$ mkdir .ssh

變更權限為700
$ chmod 700 .ssh

執行scp指令，把服務器上的testuser01用戶的私錀拷貝到工作機的localuser01用戶的.ssh目錄裡面
$ scp testuser01@192.168.0.162:/home/testuser01/.ssh/id_rsa /home/localuser01/.ssh/id_rsa

終端機靠腰了
The authenticity of host '192.168.0.162 (192.168.0.162)' can't be established.
ECDSA key fingerprint is fb:27:d8:d4:64:dc:55:c3:80:45:db:72:47:af:75:86.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.0.162' (ECDSA) to the list of known hosts.
Permission denied (publickey).

結果服務器不給你複製，為什麼呢？因為稍早我設定cubietruck的ssh服務器的時候
我把ssh服務器密碼登入的功能給關掉了，現在要把它打開才行

我在這裡為了不模糊這個步驟所關心的焦點，我只簡單提示一下過程是
修改服務器上的/etc/ssh/sshd_config
把
PasswordAuthentication no
改成
#PasswordAuthentication no
然後執行
# service ssh restart
重新啟動服務器上的ssh server服務
這樣就可以允許ssh客戶端，使用密碼來作ssh登入了

改好之後，回到工作機上，再一次執行
$ scp testuser01@192.168.0.162:/home/testuser01/.ssh/id_rsa /home/localuser01/.ssh/id_rsa

終端機回應了
testuser01@192.168.0.162's password: 
id_rsa                                                                                                               100% 1675     1.6KB/s   00:01
輸入服務器上testuser01的密碼後，快樂的把服務器上的testuser01用戶的私鑰給複製到工作機上的/home/localuser01/.ssh目錄裡

反正私錀都複製了，乾脆連public key也一起複製下來好了（雖然不需要），請執行
$ scp testuser01@192.168.0.162:/home/testuser01/.ssh/id_rsa.pub /home/localuser01/.ssh/id_rsa.pub

終端機回應了
id_rsa.pub                                                                                                           100%  402     0.4KB/s   00:00 
哦？這一次不用輸入服務器的testuser01用戶密碼
這是因為你剛才已經把服務器上的testuser01的私鑰複製下來了，而且放在路徑/home/localuser01/.ssh/id_rsa
這是ssh client端程式預設會使用的私鑰路徑，所以服務器那邊就確認了你是testuser01用戶，因此不必再詢問用戶testuser01的密碼

現在進入.ssh目錄裡看看
$ cd /home/localuser01/.ssh
$ ls -al

終端機打印了
總計 20
drwx------ 2 localuser01 localuser01 4096 11月  4 03:53 .
drwxr-xr-x 6 localuser01 localuser01 4096 11月  4 03:34 ..
-rw------- 1 localuser01 localuser01 1675 11月  4 03:49 id_rsa
-rw-r--r-- 1 localuser01 localuser01  402 11月  4 03:53 id_rsa.pub
-rw-r--r-- 1 localuser01 localuser01  222 11月  4 03:36 known_hosts

現在工作機的用戶localuser01，擁有和服務機上的用戶testuser01一模一樣的公鑰和私鑰
實際工作的時候要用上面我講的「工作機端（方案二）」
因為大多數時候，你的工作機上已經有一個你經常拿來工作的舊用戶了（比如我的筆記型電腦上一直是用用戶anntony登入）
這裡只是為了方便理解，所以在工作機上另外弄了一個新用戶localuser01
因為我覺得「工作機端（方案一）」
服務器上的testuser01用戶，直接對應工作機上的localuser01用戶的概念，是比較簡單理解的
稍後real world裡的「工作機端（方案二）」會用到工作機上的/home/anntony/.ssh/config
不會很難，可是稍微複雜一點，所以方案一還是有它存在的必要，它的目的就是要簡化程序讓你方便理解

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
i.測試使用剛才拷貝下來的private key是否可以用testuser01的身分ssh登入到服務器

還是在工作機上，還是localuser01的身份，執行
$ ssh -p22 testuser01@192.168.0.162

終端機回應了
Welcome to Ubuntu 13.10 (GNU/Linux 3.4.98-sun7i+ armv7l)

 * Documentation:  https://help.ubuntu.com/

Last login: Tue Nov  4 04:06:08 2014 from anntony-lenovo-b590.local
testuser01@cubie001:~$ 

哇靠，不用輸入服務器用戶testuser01的密碼，就快樂的登入了
這都是因為服務器上的/home/testuser01/.ssh/authorized_keys
裡面有登錄服務器用戶testuser01自已的那把公鑰（/home/testuser01/.ssh/id_rsa.pub）
而你的工作機現在登入的用戶是localuser01
你持有和這支公錀所對應的私錀（工作機上的/home/localuser01/.ssh/id_rsa就是服務器上的/home/testuser01/.ssh/id_rsa，它們是同一把私錀）
所以不需要輸入服務器用戶testuser01的密碼

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
j.把服務器上testuser01用戶家目錄下的bare repo給git clone下來到工作機端，並更名為working-repo

一樣在工作機上，還是用戶localuser01的身分
切換到家目錄下
$ cd /home/localuser01

把服務器上testuser01用戶他的家目錄下的site.git給git clone下來，並更名為working-repo
$ git clone ssh://testuser01@192.168.0.162:22/home/testuser01/site.git working-repo

上面的指令不用指定ssh port號碼22也可以，你也可以這樣下指令，和上一行效果是一樣的
$ git clone ssh://testuser01@192.168.0.162/home/testuser01/site.git working-repo

終端機回應了
Cloning into 'working-repo'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.

有一個警告耶，那是因為我們放在服務器上的裸倉庫site.git，裡面什麼commit都沒有
所以它提示你，你在複製一個空空如也的倉庫，沒關係的
再看一下現在的家目錄
$ ls -al | grep working-repo

終端機打印了
drwxrwxr-x 3 localuser01 localuser01 4096 11月  4 04:21 working-repo

嗯，很好很好，真的拉下來了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
k.在working-repo裡修改代碼，暫存，提交，然後推回服務器上的bare-repo

一樣在工作機上，一樣是localuser01的身分
待會是工作機用戶localuser01第一次執行git指令，所以一樣先給他設定user.name和user.email
$ git config --global user.name "localuser01"
$ git config --global user.email "localuser01@localhost"

接下來產生網站的代碼，然後把代碼push回服務器的site.git裸倉庫
$ cd /home/localuser01/working-repo/
$ echo "welcome to testuser01's website" >> index.html
$ git add -A
$ git commit -m "Initial commit"
$ git push origin master

終端機回應了
Counting objects: 3, done.
Writing objects: 100% (3/3), 242 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To ssh://testuser01@192.168.0.162:22/home/testuser01/site.git
 * [new branch]      master -> master

以後你要部署網站的代碼，就是這麼簡單
你在工作機上，以用戶localuser01的身分工作，然後在/home/localuser01/working-repo/寫了一些代碼
工作完畢，你就是在working-repo目錄裡執行
$ git add -A
$ git commit -m "some messages related to this update"
$ git push origin master

然後新的網站代碼就會被更新到服務器上的/home/testuser01/website
也就是服務器上的testuser01用戶他個人的網站根目錄

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

l.觀察服務器上的網站根目錄是否有被更新？

到服務器上，以用戶testuser01登入
切換到他的網站根目錄
$ cd /home/testuser01/website

看看有什麼檔案？
$ ls -al

終端機打印了
總計 12
drwxrwxr-x 2 testuser01 testuser01 4096 11月  4 04:33 .
drwxr-xr-x 6 testuser01 testuser01 4096 11月  4 04:06 ..
-rw-rw-r-- 1 testuser01 testuser01   32 11月  4 04:33 index.html

看看index.html的內容是什麼？
$ cat ./index.html

終端機打印了
welcome to testuser01's website

哇靠太爽了，真的更新了，這就是剛才在工作機上的working-repo提交的index.html啊
搞了這麼久，就是為了這個，我終於可以吃早餐了耶耶耶

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
m.把服務器用戶testuser01的private key拷貝到本機用戶anntony家目錄下的.ssh/others目錄，並更名

通常工作機上已經存在了一個你常拿來登入工作用的用戶，我的筆記型電腦上常用來登入的用戶名是anntony
所以接下來的「工作機端（方案二）」比較貼近真實生活的應用
你要以工作機用戶anntony的身份，持有服務器上的用戶testuser01他的私鑰
但是你又不希望把服務器上用戶testuser01的私鑰，給存在/home/anntony/.ssh/id_rsa
因為你本來在這個路徑就有一支私鑰了，可能你還已經把它加入到github還是bitbucket帳戶了
如果用服務器用戶testuser01的那支私錀，蓋掉你原來存在/home/anntony/.ssh/id_rsa的這一支
當然可以，可是這表示，你又要上github或是bitbucket再重新把服務器用戶testuser01的私鑰所對應的公鑰，
再重新加入github帳戶或是bitbucket帳戶的ssh keys再重新搞一次
這樣很LOW，而且如果你工作機上原來的/home/anntony/.ssh/id_rsa還有登入其他主機的用途
那完了，那些原來接受這支舊私鑰的ssh server全都不能連線了，你要再去這些機器上，
把服務器上testuser01用戶那把私鑰所對應的公鑰，加到這些原來以前用舊私鑰你可以登入，
但現在會把你踢出去的ssh server（加到那些ssh服務器上某個用戶的authorized_keys檔案裡）
所以比較簡單又合理可行的方案，就是把服務器testuser01用戶的私鑰，給另存一個檔名
只要不要是/home/anntony/.ssh/id_rsa都可以，然後修改一下/home/anntony/.ssh/config的設定
就可以讓工作機上原有的私錀/home/anntony/.ssh/id_rsa還有新來的從服務器上下載來的testuser01用戶的私鑰，兩者和平共存了

廢言好長，為什麼我都會解釋得這麼長？
難道是我的語言能力有什麼問題嗎？
可是不說這麼多，好像又說不清楚
來實作吧
現在回到工作機，然後以用戶anntony的身分登入
切換到用戶anntony的.ssh目錄下
$ cd /home/anntony/.ssh

建立一個others子目錄，待會兒要拿來存放從服務器下載來的testuser01用戶的私鑰
$ mkdir others

切換到others子目錄
$ cd others

使用scp指令，把服務器上用戶testuser01的私鑰給拷貝下來，並更名為testuser01_on_cubie_private_key
$ scp -P 22 testuser01@192.168.0.162:/home/testuser01/.ssh/id_rsa /home/anntony/.ssh/others/testuser01_on_cubie_private_key

終端機回應了
testuser01@192.168.0.162's password: 
id_rsa                                                                                                   100% 1675     1.6KB/s   00:00     
輸入服務器用戶testuser01的密碼之後，就順利下載到了私錀

我現在所在的目錄是？
$ pwd

終端機打印了
/home/anntony/.ssh/others

看看是不是有剛下載來的私鑰？
$ ls -al

終端機打印了
總計 12
drwxr-xr-x 2 anntony anntony 4096 11月  4 16:20 .
drwx------ 4 anntony anntony 4096 11月  4 16:14 ..
-rw------- 1 anntony anntony 1675 11月  4 16:20 testuser01_on_cubie_private_key

很好，真的從服務器把用戶testuser01的私鑰下載了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
n.修改工作機上已存在舊用戶anntony家目錄下的.ssh/config

一樣是在工作機上，一樣是用戶anntony的身分
切換到/home/anntony/.ssh目錄
$ cd /home/anntony/.ssh

用vi文字編輯器打開config檔案
$ vi config

原來我的/home/anntony/.ssh/config長這個樣子
Host virt
  HostName 192.168.0.11
  User git
  Port 3333
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /home/anntony/.ssh/id_rsa
  IdentitiesOnly yes
  LogLevel FATAL

Host mycubie
  #HostName 192.168.0.161
  HostName 192.168.0.162
  User aruntu
  Port 22
  IdentityFile /home/anntony/.ssh/private_key_from_cubie

現在在最後面給它加上一個區塊
# use for command --> git clone cubie02:site.git
# and this command -> git clone cubie02:/home/testuser01/site.git
Host cubie02
  HostName 192.168.0.162
  User testuser01
  Port 22
  IdentityFile /home/anntony/.ssh/others/testuser01_on_cubie_private_key

改好存檔，離開vi文字編輯器

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
o.測試上一個步驟在.ssh/config設定的主機別名有沒有生效？使用這個主機別名ssh連線到服務器（以testuser01用戶身分）

還是在工作機上，一樣是anntony用戶的身分
在終端機執行
$ ssh cubie02

終端機回應了
Welcome to Ubuntu 13.10 (GNU/Linux 3.4.98-sun7i+ armv7l)

 * Documentation:  https://help.ubuntu.com/

Last login: Tue Nov  4 04:06:48 2014 from anntony-lenovo-b590.local
testuser01@cubie001:~$ 

哦哦太美麗了，我就這麼以testuser01身分登入了服務器
這都要感謝剛才在/home/anntony/.ssh/config我們多加的區塊，也就是

Host cubie02
  HostName 192.168.0.162
  User testuser01
  Port 22
  IdentityFile /home/anntony/.ssh/others/testuser01_on_cubie_private_key

順便一提，你也許會想，那麼如果沒有作剛才在/home/anntony/.ssh/config的設定
使用ssh指令要怎麼指定連線所使用的私鑰，然後以testuser01身分登入服務器呢？
你要這樣下指令
$ ssh -p22 testuser01@192.168.0.162 -i /home/anntony/.ssh/others/testuser01_on_cubie_private_key

如果你沒有加上指令後面的-i /home/anntony/.ssh/others/testuser01_on_cubie_private_key
來指定一把私錀，那麼預設是用現在登入用戶anntony的/home/anntony/.ssh/id_rsa 這一把私鑰來作登入
然後你也許又會想
那麼麻煩點，我就這樣下指令就好了
為什麼要在/home/anntony/.ssh/config寫上面那段設定呢？因為我們待會兒要使用git clone指令，
我們希望git clone指令可以使用/home/anntony/.ssh/others/testuser01_on_cubie_private_key 當作連線ssh服務器的私鑰
最簡單的方式就是在/home/anntony/.ssh/config
用上面的方式，指定一個主機別名cubie02，然後規定連線的服務器IP是192.168.0.162，還有連線的服務器用戶名testuser01，埠號為22
最重要的是可以指定連線使用的私鑰路徑為/home/anntony/.ssh/others/testuser01_on_cubie_private_key
經過這樣的設定，稍後我們可以使用
$ git clone cubie02:site.git
或是
$ git clone cubie02:/home/testuser01/site.git
這樣的指令，把我們放在服務器上的裸倉庫給git clone到工作機上

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
p.把服務器上的site.git給git clone到工作機，並更名為working-repo

一樣在工作機上，一樣是使用anntony用戶登入
切換到用戶anntony的家目錄下
$ cd /home/anntony

把服務器用戶testuser01家目錄下的裸倉庫給git clone下來，並更名為working-repo
$ git clone cubie02:site.git working-repo

上面的指令也可以這樣執行，效果是一樣的，我個人是偏好這一種，寫出完整路徑的用法
$ git clone cubie02:/home/testuser01/site.git working-repo

終端機打印了
Cloning into 'working-repo'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
Checking connectivity... done.

現在我人在那裡呢？
$ pwd

終端機打印了
/home/anntony

剛才真的有把裸倉庫git clone下來嗎？執行
$ ls -al|grep working-repo

終端機打印了
drwxr-xr-x   3 anntony anntony  4096 11月  4 21:47 working-repo

真的有耶，進去瞧瞧裡面有什麼？
$ cd working-repo
$ git log --oneline --graph --decorate --all

終端機打印了
* 1cf48de (HEAD, origin/master, origin/HEAD, master) Initial commit

這是我們在稍早的「工作機端（方案一）」裡面提交的Initial commit
看看工作目錄裡，應該是
$ ls -al

終端機打印了
總計 16
drwxr-xr-x  3 anntony anntony 4096 11月  4 21:47 .
drwxr-xr-x 49 anntony anntony 4096 11月  4 21:47 ..
drwxr-xr-x  8 anntony anntony 4096 11月  4 21:47 .git
-rw-r--r--  1 anntony anntony   32 11月  4 21:47 index.html

是的，除了.git目錄之外，應該只會有一個index.html
看看它的內容
$ cat index.html

終端機打印了
welcome to testuser01's website

是的，不要懷疑，這是從稍早服務器上的裸倉庫（路徑：/home/testuser01/site.git）複製下來的
接下來你每天的工作，就是在你的工作機上的
/home/anntony/working-repo
一直提交新的網站代碼
然後重複著
（修改代碼，我改我改我改改改）
$ git add -A
$ git commit -m "some messages related to this update"
$ git push origin master

當你執行完git push origin master這行指令的時候
服務器上的你的網站根目錄
/home/testuser01/website
就會自動被更新了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
r.如何「倒帶」讓網站根目錄回到上一個提交的狀態？

現在你人還是在工作機上，然後是用戶anntony登入的身分
然後切換到你的working-repo
$ cd /home/anntony/working-repo

看一下現在倉庫裡的分支和提交狀況
$ git log --oneline --graph --decorate --all

終端機打印了
* 1cf48de (HEAD, origin/master, origin/HEAD, master) Initial commit

現在你只有一個提交，看看工作目錄下有什麼？
$ ls -al

終端機打印了
總計 16
drwxr-xr-x  3 anntony anntony 4096 11月  5 03:11 .
drwxr-xr-x 49 anntony anntony 4096 11月  5 03:11 ..
drwxr-xr-x  8 anntony anntony 4096 11月  5 03:11 .git
-rw-r--r--  1 anntony anntony   32 11月  5 03:11 index.html

看一下index.html檔案裡寫些什麼？
$ cat ./index.html

終端機打印了
welcome to testuser01's website

現在我們改一下這個檔案，打開vi文字編輯器
$ vi ./index.html

原來的檔案是這樣
welcome to testuser01's website

我們把檔案改成這樣
welcome to testuser01's website<br>
this line was added only in commit 'm2'

改好，存檔離開vi文字編輯器
然後暫存，提交，推回服務器的裸倉庫/home/testuser01/site.git
$ git add -A
$ git commit -m "m2"
$ git push origin master

回到服務器上觀察用戶testuser01的網站根目錄
$ cd /home/testuser01/website
$ cat ./index.html

終端機打印了
welcome to testuser01's website<br>
this line was added only in commit 'm2'

耶耶耶，更新了，變成新的版本
那麼如果我突然又想念剛才第一個舊的版本
怎麼說呢，回到工作機上，然後切換到用戶anntony的working-repo目錄
$ cd /home/anntony/working-repo

看一下現在工作倉庫裡的分支和提交狀況
$ git log --oneline --graph --decorate --all

終端機打印了
* 5bf04b3 (HEAD, origin/master, origin/HEAD, master) m2
* 1cf48de Initial commit

現在我們的HEAD停在master分支上的提交m2的地方
而遠端倉庫origin（服務器的/home/testuser01/site.git）也是一樣
如果我現在想要「倒帶」回到剛才第一個提交，也就是Initial commit的那個版本
我要怎麼作呢？現在我還是在工作機上的working-repo目錄裡面
首先我把HEAD指到Initial commit也就是第一個提交的地方
$ git reset --hard 1cf48d

終端機回應了
HEAD is now at 1cf48de Initial commit

再看一下現在working-repo的分支和提交圖
$ git log --oneline --graph --decorate --all

終端機打印了
* 5bf04b3 (origin/master, origin/HEAD) m2
* 1cf48de (HEAD, master) Initial commit

這表示現在的HEAD指在master分支的第一個提交，Sha1 hash ID是1cf48de的那個叫作Initial commit的提交上面
很繞舌耶，總之現在HEAD指在第一個提交的地方
我們現在就拿工作機的倉庫，把服務器上的遠端倉庫的內容蓋掉就可以了，請執行
$ git push -f origin master

終端機打印了
Total 0 (delta 0), reused 0 (delta 0)
To cubie02:/home/testuser01/site.git
 + 5bf04b3...1cf48de master -> master (forced update)

有看到（forced update）強制更新嗎？現在回到服務器上testuser01用戶的網站根目錄，把index.html打印出來看看
$ cd /home/testuser01/website
$ cat ./index.html

終端機打印了
welcome to testuser01's website

哦耶，這是稍早的第一個提交的版本
那麼服務器上的裸倉庫怎麼樣了呢？有真的把第二個commit給消掉了嗎？
一樣是在服務器上，切換到testuser01用戶的裸倉庫
$ cd /home/testuser01/site.git

打印裸倉庫的分支和提交圖來看看
$ git log --oneline --graph --decorate --all

終端機打印了
* 1cf48de (HEAD, master) Initial commit

經過剛才的強制更新指令（git push -f origin master）之後
服務器上的裸倉庫回到了原先只有第一個提交（Initial commit）的狀態

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
s.如何讓用戶完全禁止使用ssh登入服務器（包括密碼登入或是私鑰登入都不行），只能使用git clone拉site.git下來，或是git push推回site.git

在服務器上登入為root用戶，打開vi文字編輯器，修改服務器上的/etc/passwd檔案
# vi /etc/passwd

把最後面testuser01的那一行
原來是長得這樣
testuser01:x:1005:1005:,,,:/home/testuser01:/bin/bash
請改成這個樣子
testuser01:x:1005:1005:,,,:/home/testuser01:/usr/bin/git-shell

存檔，然後離開
現在你的工作機上，還是可以使用git clone和git push來對服務器上的/home/testuser01/site.git進行操作
但是不能再使用ssh連線登入服務器了（不管是指定私鑰或是密碼登入都不行）

你可以回到工作機上
以用戶anntony身分，執行
$ ssh cubie02
或是
$ ssh -p 22 testuser01@192.168.0.162 -i /home/anntony/.ssh/others/testuser01_on_cubie_private_key
試試看

結果是不能登入，終端機會靠腰說
Welcome to Ubuntu 13.10 (GNU/Linux 3.4.98-sun7i+ armv7l)

 * Documentation:  https://help.ubuntu.com/

Your Ubuntu release is not supported anymore.
For upgrade information, please visit:
http://www.ubuntu.com/releaseendoflife

New release '14.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.

Last login: Wed Nov  5 03:50:25 2014 from anntony-lenovo-b590.local
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to 192.168.0.162 closed.
anntony@anntony-Lenovo-B590 ~ $

然後把你踢回工作機下的終端機提示符
不過你放心，git clone和git push都還是可以正常拉下或是正常推回服務器裸倉庫/home/testuser01/site.git
受限制的只是你不能再以testuser01用戶的身分ssh登入服務器而已

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
t.假設現在網站服務器和工作機位於同一個網段內（192.168.0.0/24），如何建立測試環境？

服務器IP：192.168.0.162
工作機IP：192.168.0.12

服務器的nginx安裝在/usr/local/nginx目錄
組態檔的路徑在/usr/local/nginx/nginx.conf
在服務器上，以root身分登入後，打開vi文字編輯器，修改nginx.conf
# vi /usr/local/nginx/nginx.conf

加入一個server { }區塊，如下
    # testing virtual host - cubie
    server {
      server_name cubie;
      listen 80;
      access_log  logs/cubie.access.log combined;
      error_log   logs/cubie.error.log;

      location / {
         root /home/testuser01/website;
         index index.html index.htm;
      }
    }

改好存檔，然後一樣是用root身份執行下面的指令，重新啟動nginx服務器，讓剛才的設定值生效
# service nginx restart
請注意上面的設定server_name指令所指定的主機名稱是cubie
還有下方的location { }區塊裡，設定了cubie這個主機名稱的網站根目錄在/home/testuser01/website
用戶端（就是Internet Explore、或Firefox、或Google Chrome之類的網頁瀏覽器）發出的request
裡面有一個叫作HOST的request HEADER
詳細的解釋在w3.org的這一個連結
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
捲到14.23 HOST那一個小節
The Host request-header field specifies the Internet host and port number of the resource being requested,...（巴啦巴啦有空慢慢看）
為什麼講到Host request-header，因為和上面nginx.conf設定的server_name cubie;有關係
只要是用戶（我指的是活生生的人）在他電腦上的瀏覽器（也許是IE、也許是Firefox、也許是Chrome）的網址列
打上
http://cubie
那麼他的瀏覽器就會對cubie這個主機名稱所對應的IP地址發出一個HTTP request 
（前提是如果這個主機名稱可以被地球上存在的DNS Server給解析為某個IP地址的話，使用地球的DNS server系統來解析主機名稱或域名之前，會先查詢本機的/etc/hosts）
而這個request包含了一個叫作HOST的欄位，
以上例用戶（活人）想要瀏覽http://cubie 的這個例子
那麼HOST header的值就會是cubie
上面的那個nginx.conf的server { }區塊裡的設定，只要nginx服務器接收到的request的HOST header的值是cubie
就會使用上面那個server { }區塊裡的設定
在nginx.conf裡面可以指定多個server { }區塊，每一個server { }區塊裡的server_name指令後面的值都可以不一樣
實際應用的時候，像是
www.domain1.com
www.hostname2.org
www.hostname3.com.tw
這三個完全不一樣的主機名稱，但是他們的DNS A RECORD都指向同一個Public IP（假設是11.22.33.44，這一台nginx server上面會同時存放這三個網站的代碼）
那麼這台nginx server上面的nginx.conf組態檔裡，就會有好幾個server { }區塊
這台服務了上面三個主機名稱的nginx服務器，它的nginx.conf組態檔就會像下面這樣的結構（每個主機名稱有自已的網站根目錄）

http{
     server {
          server_name www.domain1.com;
          listen 80;
          root /home/stark/website;
          (the other settings ...)
     }

     server {
          server_name www.hostname2.org;
          listen 80;
          root /home/tony/website;
          (the other settings ...)
     }

     server {
          server_name www.hostname3.com.tw;
          listen 80;
          root /home/lucy/website;
          (the other settings ...)
     }

(the other settings ...)
}

你也許會想，這三個不同的主機名稱都是使用同一個public IP 11.22.33.44
然後還是一樣的80 port，那麼nginx服務器怎麼會知道他到底要回應那一個網站根目錄的內容給用戶呢？
答案就是用它接收到的request的HOST header裡的值，來區分應該使用那一個server { }區塊裡的設定
因為想要用服務器的80 port瀏覽www.domain1.com的用戶（活人）
會在他的瀏覽器網址列輸入
http://www.domain1.com
然後經過DNS server解析，www.domain1.com指向的IP地址是11.22.33.44
所以IP地址是11.22.33.44的這台nginx服務器，會收到這個用戶（活人）的瀏覽器發出的http request
而request的HOST header裡面清楚寫著的值是www.domain1.com
雖然有三個不同主機名稱的網站都使用同一台IP地址為11.22.33.44的nginx網站服務器
可是從送來的request HOST header的值，nginx可以判斷應該要回應那個網站的內容給用戶
（對不起我又廢言了很長，這是我從書上理解的觀念，希望沒有錯，期待更深入的討論與指教，像是怎麼用sniffer抓封包來實際看看request header裡到底寫了什麼之類的進階議題？）

在這裡cubie這個主機名稱是我亂取的，cubie這個主機名稱只存在於我家的區網測試環境裡
現在請到工作機上，以root身分登入，然後修改工作機上的/etc/hosts檔案，請執行
# vi /etc/hosts
這裡給出我現在工作機上的/etc/hosts
如下
127.0.0.1	localhost
127.0.1.1	anntony-Lenovo-B590
192.168.0.166   banana
192.168.0.162   cubie

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

改好就存檔，離開vi文字編輯器
現在全世界的電腦都不認識cubie這個主機名稱，只有你的工作機知道cubie這個主機名稱就是192.168.0.162（區網裡的網站服務器）
現在還是在工作機上的終端機裡，試著ping cubie試試看
# ping cubie

終端機回應了
PING cubie (192.168.0.162) 56(84) bytes of data.
64 bytes from cubie (192.168.0.162): icmp_seq=1 ttl=64 time=2.45 ms
64 bytes from cubie (192.168.0.162): icmp_seq=2 ttl=64 time=2.34 ms
64 bytes from cubie (192.168.0.162): icmp_seq=3 ttl=64 time=2.37 ms
^C
--- cubie ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2003ms
rtt min/avg/max/mdev = 2.347/2.389/2.452/0.072 ms

是的，你的工作機現在很清楚的明白，cubie這個主機名稱就等於192.168.0.162這個IP地址
這是因為剛才我們在/etc/hosts裡很清楚的寫上了

192.168.0.162   cubie

這一行的關係
所以每一次在你的工作機上的working-repo（/home/anntony/working-repo）
修改完網站代碼，暫存、提交，然後執行git push origin master推回服務器（192.168.0.162）上的/home/testuser01/site.git裸倉庫之後
你可以直接在工作機上的瀏覽器（也許是IE、或是Firefox或是Chrome）
直接在網址列輸入
http://cubie

你就可以立刻看到剛才git push到網站服務器的代碼已經開始正常運作了

（步驟t寫得不是很順暢，稍後有時間也許再寫一個版本放上來…）
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
打完收工
